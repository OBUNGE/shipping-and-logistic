<h2>Storefront Settings</h2>
<p>Update your store name, logo, banner, and description.</p>

<%= form_with model: @seller, url: seller_path(@seller.store_slug), method: :patch, local: true, html: { id: "storefront-form" } do |f| %>
  <div class="mb-3">
    <%= f.label :store_name, "Store Name", class: "form-label" %>
    <%= f.text_field :store_name, class: "form-control" %>
  </div>

  <div class="mb-3">
    <%= f.label :store_logo_url, "Store Logo", class: "form-label" %>
    <% if @seller.store_logo_url.present? %>
      <div class="mb-2">
        <%= image_tag @seller.store_logo_url, class: "rounded-circle border", style: "width: 80px; height: 80px; object-fit: cover;" %>
      </div>
    <% end %>
    <input type="file" id="store_logo" class="form-control" />
    <%= f.hidden_field :store_logo_url, id: "store_logo_url" %>
  </div>

  <div class="mb-3">
    <%= f.label :store_banner_url, "Store Banner", class: "form-label" %>
    <% if @seller.store_banner_url.present? %>
      <div class="mb-2">
        <%= image_tag @seller.store_banner_url, class: "img-fluid rounded", style: "max-height: 200px; object-fit: cover;" %>
      </div>
    <% end %>
    <input type="file" id="store_banner" class="form-control" />
    <%= f.hidden_field :store_banner_url, id: "store_banner_url" %>
  </div>

  <div class="mb-3">
    <%= f.label :store_description, "Description", class: "form-label" %>
    <%= f.text_area :store_description, class: "form-control", rows: 3 %>
  </div>

  <%= f.submit "Save Changes", class: "btn btn-primary" %>
<% end %>
<script type="module">
  import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

  const supabase = createClient("<%= ENV['SUPABASE_URL'] %>", "<%= ENV['SUPABASE_ANON_KEY'] %>");

  async function uploadFile(inputId, hiddenFieldId, bucket) {
    const fileInput = document.getElementById(inputId);
    const hiddenField = document.getElementById(hiddenFieldId);

    if (fileInput.files.length > 0) {
      const file = fileInput.files[0];
      const filePath = `${Date.now()}_${file.name}`;

      let { data, error } = await supabase.storage.from(bucket).upload(filePath, file, {
        cacheControl: "3600",
        upsert: true
      });

      if (error) {
        alert("Upload failed: " + error.message);
        return false;
      }

      // Get public URL
      const { data: publicUrl } = supabase.storage.from(bucket).getPublicUrl(filePath);
      hiddenField.value = publicUrl.publicUrl;
    }
    return true;
  }

  document.getElementById("storefront-form").addEventListener("submit", async function (e) {
    e.preventDefault();

    // Upload logo and banner before submitting
    await uploadFile("store_logo", "store_logo_url", "store-assets");
    await uploadFile("store_banner", "store_banner_url", "store-assets");

    this.submit();
  });
</script>
